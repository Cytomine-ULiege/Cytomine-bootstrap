#!/bin/bash

#
# Copyright (c) 2009-2018. Authors: see NOTICE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

echo "Starting Cytomine..."
echo "Configuration:"
echo "* Main URLs *"
echo "CORE_URL=$CORE_URL"
echo "IMS_URL=$IMS_URL"
echo "UPLOAD_URL=$UPLOAD_URL"
echo ""
echo "* Plugins *"
echo "BACKUP=$BACKUP_ENABLED"
echo "RETRIEVAL=$RETRIEVAL_ENABLED"
echo "IRIS=$IRIS_ENABLED"
echo "IIPJP2=$IIP_JP2_ENABLED"
echo "BIOFORMAT=$BIOFORMAT_ENABLED"
echo "SOFTWARE=$SOFTWARE_ENABLED"
echo "CORE_DEVELOPMENT=$CORE_DEVELOPMENT"
echo "IMS_DEVELOPMENT=$IMS_DEVELOPMENT"
echo ""
echo "* Container versions *"
echo "$NGINX_NAMESPACE/nginx:$NGINX_VERSION"
if [[ $CORE_DEVELOPMENT = false ]]; then echo echo "$CORE_NAMESPACE/core:$CORE_VERSION"; fi
echo "$POSTGIS_NAMESPACE/postgis:$POSTGIS_VERSION"
echo "$MONGODB_NAMESPACE/mongodb:$MONGODB_VERSION"
if [[ $BACKUP_ENABLED = true ]]; then echo "$BACKUP_NAMESPACE/backup:$BACKUP_VERSION"; fi
if [[ $IMS_DEVELOPMENT = false ]]; then echo "$IMS_NAMESPACE/ims:$IMS_VERSION"; fi
if [[ $BIOFORMAT_ENABLED = true ]]; then echo "$BIOFORMAT_NAMESPACE/bioformat:$BIOFORMAT_VERSION"; fi
echo "$IIPCYTO_NAMESPACE/iip-cyto:$IIPCYTO_VERSION"
if [[ $IIP_JP2_ENABLED = true ]]; then echo "$IIPJP2_NAMESPACE/iip-jp2000:$IIPJP2_VERSION"; fi
echo "$MEMCACHED_NAMESPACE/memcached:$MEMCACHED_VERSION"
if [[ $RETRIEVAL_ENABLED = true ]]; then echo "$RETRIEVAL_NAMESPACE/retrieval:$RETRIEVAL_VERSION"; fi
if [[ $IRIS_ENABLED = true ]]; then echo "$IRIS_NAMESPACE/iris:$IRIS_VERSION"; fi
if [[ $SOFTWARE_ENABLED = true ]]; then echo "$RABBITMQ_NAMESPACE/rabbitmq:$RABBITMQ_VERSION"; fi
if [[ $SOFTWARE_ENABLED = true ]]; then echo "$SLURM_NAMESPACE/slurm:$SLURM_VERSION"; fi
if [[ $SOFTWARE_ENABLED = true ]]; then echo "$SOFTWAREROUTER_NAMESPACE/software_router:$SOFTWAREROUTER_VERSION"; fi
echo ""

# Create server SSH keys if needed
SERVER_SSHKEYS_FILE="$SERVER_SSHKEYS_PATH/id_rsa"
if [ ! -e $SERVER_SSHKEYS_FILE ]
then
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        apt-get install -y ssh-keygen
    fi
    ssh-keygen -t rsa -N "" -C $CORE_URL -f $SERVER_SSHKEYS_FILE
fi


# ----- MEMCACHED -----
docker create --name memcached \
--restart=unless-stopped \
$MEMCACHED_NAMESPACE/memcached:$MEMCACHED_VERSION > /dev/null

docker cp $PWD/configs/memcached/memcached.conf memcached:/etc/memcached.conf
docker start memcached


# ----- RABBITMQ -----
if [[ $SOFTWARE_ENABLED = true ]]
then
    docker create --name rabbitmq \
    -p 5672:5672 -p 15672:15672 \
    -e RABBITMQ_PASS=$RABBITMQ_PASSWORD \
    --restart=unless-stopped \
    $RABBITMQ_NAMESPACE/rabbitmq:$RABBITMQ_VERSION > /dev/null

    docker start rabbitmq
fi


# ----- POSTGRESQL ------
docker volume create --name $POSTGRESQL_VOLUME > /dev/null
docker create --name postgresql \
-p 5432:5432 \
-v $POSTGRESQL_VOLUME:/var/lib/postgresql \
--restart=unless-stopped \
$POSTGRES_NAMESPACE/postgres:$POSTGRES_VERSION postgres -c 'config_file=/tmp/postgresql.conf' > /dev/null

docker cp $PWD/configs/postgresql/postgresql.conf postgresql:/tmp/postgresql.conf
docker start postgresql


# ----- MONGODB -----
docker volume create --name $MONGODB_VOLUME > /dev/null
docker run -d \
-p 27017:27017 -p 28017:28017 \
--name mongodb \
-v $MONGODB_VOLUME:/data/db \
--restart=unless-stopped \
$MONGODB_NAMESPACE/mongodb:$MONGODB_VERSION > /dev/null


# ----- BACKUP POSTGRESQL -----
if [[ $BACKUP_ENABLED = true ]]
then
	# create backup docker
	docker run -d --name backup_postgis --link postgresql:db -v $BACKUP_PATH/postgis:/backup --restart=unless-stopped \
	-e SENDER_EMAIL=$SENDER_EMAIL \
	-e SENDER_EMAIL_PASS=$SENDER_EMAIL_PASS \
	-e SENDER_EMAIL_SMTP_HOST=$SENDER_EMAIL_SMTP_HOST \
	-e SENDER_EMAIL_SMTP_PORT=$SENDER_EMAIL_SMTP_PORT \
	-e RECEIVER_EMAIL=$RECEIVER_EMAIL \
	-e SGBD='postgres' \
	-e DATABASE='docker' \
	-e USER='docker' \
	-e PASSWD='docker' \
	$BACKUP_NAMESPACE/backup:$BACKUP_VERSION > /dev/null
fi


# ----- BACKUP MONGODB -----
if [[ $BACKUP_ENABLED = true ]]
then
	docker run -d --name backup_mongo --link mongodb:db -v $BACKUP_PATH/mongo:/backup --restart=unless-stopped \
	-e SGBD='mongodb' \
	-e SENDER_EMAIL=$SENDER_EMAIL \
	-e SENDER_EMAIL_PASS=$SENDER_EMAIL_PASS \
	-e SENDER_EMAIL_SMTP_HOST=$SENDER_EMAIL_SMTP_HOST \
	-e SENDER_EMAIL_SMTP_PORT=$SENDER_EMAIL_SMTP_PORT \
	-e RECEIVER_EMAIL=$RECEIVER_EMAIL \
	$BACKUP_NAMESPACE/backup:$BACKUP_VERSION > /dev/null
fi

# ----- RETRIEVAL -----
if [[ $RETRIEVAL_ENABLED = true ]]
then
    docker create --name retrieval \
    -v $RETRIEVAL_PATH:/data/thumb \
    -e RETRIEVAL_ENGINE=$RETRIEVAL_ENGINE \
    -e RETRIEVAL_PASSWORD=$RETRIEVAL_PASSWORD \
    --restart=unless-stopped \
    $RETRIEVAL_NAMESPACE/retrieval:$RETRIEVAL_VERSION > /dev/null

    docker cp $PWD/hosts/retrieval/addHosts.sh retrieval:/tmp/addHosts.sh
    docker start retrieval
fi

# ----- IIP JP2 -----
if [[ $IIP_JP2_ENABLED = true ]]
then
    docker create --name iipJP2 \
    --link memcached:memcached \
    -v $IMS_STORAGE_PATH:$IMS_STORAGE_PATH \
    --privileged \
    -e NB_IIP_PROCESS=$NB_IIP_PROCESS \
    --restart=unless-stopped \
    $IIPJP2_NAMESPACE/iip-jp2000:$IIPJP2_VERSION > /dev/null

    docker cp $PWD/configs/iipJP2/nginx.conf.sample iipJP2:/tmp/nginx.conf.sample
    docker start iipJP2
fi

# ----- IIP CYTO -----
docker create --name iipCyto \
--link memcached:memcached \
-v $IMS_STORAGE_PATH:$IMS_STORAGE_PATH \
--privileged \
-e NB_IIP_PROCESS=$NB_IIP_PROCESS \
--restart=unless-stopped \
$IIPCYTO_NAMESPACE/iip-cyto:$IIPCYTO_VERSION > /dev/null

docker cp $PWD/configs/iipCyto/nginx.conf.sample iipCyto:/tmp/nginx.conf.sample
docker cp $PWD/configs/iipCyto/iip-configuration.sh iipCyto:/tmp/iip-configuration.sh
docker start iipCyto


# ----- BIOFORMAT -----
if [[ $BIOFORMAT_ENABLED = true ]]
then
    docker create --name bioformat \
    -v $IMS_STORAGE_PATH:$IMS_STORAGE_PATH \
    -e BIOFORMAT_PORT=4321 \
    --restart=unless-stopped \
    $BIOFORMAT_NAMESPACE/bioformat:$BIOFORMAT_VERSION > /dev/null

    docker start bioformat
fi


# ----- IMS -----
if [[ $IMS_DEVELOPMENT = false ]]
then
    docker create --name ims \
    --link bioformat:bioformat \
    -e IMS_STORAGE_PATH=$IMS_STORAGE_PATH \
    -e FAST_DATA_PATH=$FAST_DATA_PATH \
    -v $IMS_STORAGE_PATH:$IMS_STORAGE_PATH \
    -v $IMS_BUFFER_PATH:/tmp/uploaded \
    -v $FAST_DATA_PATH:$FAST_DATA_PATH \
    --restart=unless-stopped \
    $IMS_NAMESPACE/ims:$IMS_VERSION > /dev/null

    docker cp $PWD/configs/ims/ims-config.groovy ims:/usr/share/tomcat7/.grails/ims-config.groovy
    docker cp $PWD/hosts/ims/addHosts.sh ims:/tmp/addHosts.sh
    docker start ims
fi

# ----- CORE -----
if [[ $CORE_DEVELOPMENT = false ]]
then
    docker create --name core \
    --link postgresql:postgresql \
    --link mongodb:mongodb \
    --link rabbitmq:rabbitmq \
    -v /etc/localtime:/etc/localtime \
    --restart=unless-stopped \
    $CORE_NAMESPACE/core:$CORE_VERSION > /dev/null

    docker cp $PWD/configs/core/cytomineconfig.groovy core:/usr/share/tomcat7/.grails/cytomineconfig.groovy
    docker cp $PWD/hosts/core/addHosts.sh core:/tmp/addHosts.sh
    docker start core
fi

# ----- IRIS -----
if [[ $IRIS_ENABLED = true ]]
then
    docker volume create --name $IRIS_VOLUME > /dev/null
    docker create --name iris \
    -v $IRIS_VOLUME:/var/lib/tomcat7/db \
    --restart=unless-stopped \
    $IRIS_NAMESPACE/iris:$IRIS_VERSION > /dev/null

    docker cp $PWD/configs/iris/iris-config.groovy iris:/usr/share/tomcat7/.grails/iris-config.groovy
    docker cp $PWD/configs/iris/iris-production-config.groovy iris:/usr/share/tomcat7/.grails/iris-production-config.groovy
    docker cp $PWD/hosts/iris/addHosts.sh iris:/tmp/addHosts.sh
    docker start iris
fi

# ----- NGINX -----
docker create --name nginx \
--link iris:iris \
--link ims:ims \
--link retrieval:retrieval \
--link iipCyto:iipCyto \
--link core:core \
--link iipJP2:iipJP2 \
-v $IMS_BUFFER_PATH:/tmp/uploaded \
-v $PROXY_CACHE_PATH:/cache \
-v $CERTIFICATE_PATH:/certificates \
-p 80:80 \
-p 443:443 \
--restart=unless-stopped \
$NGINX_NAMESPACE/nginx:$NGINX_VERSION > /dev/null

docker cp $PWD/configs/nginx/nginx.conf nginx:/usr/local/nginx/conf/nginx.conf
docker cp $PWD/configs/nginx/server-core.conf nginx:/usr/local/nginx/conf/server-core.conf;
docker cp $PWD/configs/nginx/server-ims.conf nginx:/usr/local/nginx/conf/server-ims.conf;

if [[ $IRIS_ENABLED = true ]]; then docker cp $PWD/configs/nginx/server-iris.conf nginx:/usr/local/nginx/conf/server-iris.conf; fi
if [[ $RETRIEVAL_ENABLED = true ]]; then docker cp $PWD/configs/nginx/server-retrieval.conf nginx:/usr/local/nginx/conf/server-retrieval.conf; fi
if [[ $IIP_JP2_ENABLED = true ]]; then docker cp $PWD/configs/nginx/server-iipjp2.conf nginx:/usr/local/nginx/conf/server-iipjp2.conf; fi

docker start nginx


# ----- SLURM -----
if [[ $SOFTWARE_ENABLED = true ]]
then
    docker volume create --name $SLURM_VOLUME > /dev/null
    docker create --name slurm -t -h cytomine-slurm \
    --privileged \
    -v $SLURM_VOLUME:/var/lib/mysql \
    -v $SERVER_SSHKEYS_PATH:$SERVER_SSHKEYS_PATH \
    -v $SOFTWARE_DOCKER_IMAGES_PATH:$SOFTWARE_DOCKER_IMAGES_PATH \
    -e SERVER_SSHKEYS_FILE=$SERVER_SSHKEYS_FILE \
    -p 10022:22 \
    --restart=unless-stopped \
    $SLURM_NAMESPACE/slurm:$SLURM_VERSION > /dev/null

    docker cp $PWD/hosts/slurm/addHosts.sh slurm:/tmp/addHosts.sh
    docker start slurm
fi

# ----- SOFTWARE ROUTER -----
if [[ $SOFTWARE_ENABLED = true ]]
then
    docker create --name software_router \
    --link rabbitmq:rabbitmq \
    --link slurm:slurm \
    --privileged \
    -v $SOFTWARE_CODE_PATH:$SOFTWARE_CODE_PATH \
    -v $SOFTWARE_DOCKER_IMAGES_PATH:$SOFTWARE_DOCKER_IMAGES_PATH \
    -v $JOBS_PATH:$JOBS_PATH \
    -v $SERVER_SSHKEYS_PATH:$SERVER_SSHKEYS_PATH \
    --restart=unless-stopped \
    -p 22 \
    $SOFTWAREROUTER_NAMESPACE/software_router:$SOFTWAREROUTER_VERSION > /dev/null

    docker cp $PWD/hosts/software_router/addHosts.sh software_router:/tmp/addHosts.sh
    docker cp $PWD/configs/software_router/config.groovy software_router:/opt/config.groovy
    docker cp $PWD/configs/software_router/log4j.properties software_router:/opt/log4j.properties
    docker start software_router
fi